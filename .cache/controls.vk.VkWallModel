12d5db71d3a7fe6150432b3e9d23f8a237e2f4b4
ccopy_reg
_reconstructor
p1
(ccompiler.pyparsing
ParseResults
p2
c__builtin__
object
p3
NtRp4
((lp5
g1
(ccompiler.lang
Component
p6
g3
NtRp7
(dp8
S'doc'
p9
g1
(ccompiler.lang
DocumentationString
p10
g3
NtRp11
(dp12
S'text'
p13
S"this model get data from the 'vkontakte' social network wall"
p14
sbsS'name'
p15
S'ListModel'
p16
sS'children'
p17
g1
(g2
g3
NtRp18
((lp19
g1
(ccompiler.lang
Signal
p20
g3
NtRp21
(dp22
g9
g1
(g10
g3
NtRp23
(dp24
g13
S'any error during requestoccured signal'
p25
sbsg15
S'error'
p26
sbag1
(ccompiler.lang
Property
p27
g3
NtRp28
(dp29
g9
g1
(g10
g3
NtRp30
(dp31
g13
S'user ID  of the owner of the wall'
p32
sbsS'lazy'
p33
I00
sS'const'
p34
I00
sS'properties'
p35
(lp36
(S'ownerId'
Ntp37
asS'type'
p38
S'int'
p39
sbag1
(g6
g3
NtRp40
(dp41
g9
Nsg15
S'VkApi'
p42
sg17
g1
(g2
g3
NtRp43
((lp44
g1
(ccompiler.lang
IdAssignment
p45
g3
NtRp46
(dp47
g9
Nsg15
S'vkApi'
p48
sba((dN(dp49
Nttbsbag1
(ccompiler.lang
Method
p50
g3
NtRp51
(dp52
S'code'
p53
S'{\n\t\tif (data.error) {\n\t\t\tlog("Request error", data.error)\n\t\t\tthis.error(data.error)\n\t\t} else {\n\t\t\tvar wall = data.response.wall\n\t\t\t// first wall[0] is for total entries count\n\t\t\tfor (var i = 1; i < wall.length; ++i)\n\t\t\t\tthis.append(wall[i])\n\t\t}\n\t}'
p54
sg9
g1
(g10
g3
NtRp55
(dp56
g13
S'@private'
p57
sbsS'args'
p58
g1
(g2
g3
NtRp59
((lp60
S'data'
p61
a((dN(dp62
Nttbsg15
g1
(g2
g3
NtRp63
((lp64
S'_fillImpl'
p65
a((dN(dp66
NttbsS'event'
p67
I01
sbag1
(g50
g3
NtRp68
(dp69
g53
S'{\n\t\tthis.clear()\n\n\t\tif (!this.ownerId) {\n\t\t\tlog("Failed to get wall data - owner ID is undefined")\n\t\t\treturn\n\t\t}\n\n\t\tvar settings = {\n\t\t\textended: 1,\n\t\t\tcount: 100,\n\t\t\towner_id: this.ownerId\n\t\t}\n\t\tvkApi.wallGet(this._fillImpl.bind(this), settings)\n\t}'
p70
sg9
g1
(g10
g3
NtRp71
(dp72
g13
S"fill model with data from 'ownerId' wall with default parameters"
p73
sbsg58
g1
(g2
g3
NtRp74
((lp75
((dN(dp76
Nttbsg15
g1
(g2
g3
NtRp77
((lp78
S'fillDefault'
p79
a((dN(dp80
Nttbsg67
I01
sbag1
(g50
g3
NtRp81
(dp82
g53
S'{\n\t\tthis.clear()\n\n\t\tif (!settings.owner_id && this.ownerId)\n\t\t\tsettings.owner_id = this.ownerId\n\n\t\tvkApi.wallGet(this._fillImpl.bind(this), settings)\n\t}'
p83
sg9
g1
(g10
g3
NtRp84
(dp85
g13
S'@param settings:Object additional request parameters\n\t fill model with data from the wall with customized settings such as count, extended etc.'
p86
sbsg58
g1
(g2
g3
NtRp87
((lp88
S'settings'
p89
a((dN(dp90
Nttbsg15
g1
(g2
g3
NtRp91
((lp92
S'fillCustom'
p93
a((dN(dp94
Nttbsg67
I01
sba((dN(dp95
Nttbsba((dN(dp96
Nttb.