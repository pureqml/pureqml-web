60b6d933c16b77f86b9cc95be4b96a23c0faa007
ccopy_reg
_reconstructor
p1
(ccompiler.pyparsing
ParseResults
p2
c__builtin__
object
p3
NtRp4
((lp5
g1
(ccompiler.lang
Component
p6
g3
NtRp7
(dp8
S'doc'
p9
g1
(ccompiler.lang
DocumentationString
p10
g3
NtRp11
(dp12
S'text'
p13
S"provides target model's filtering and sorting"
p14
sbsS'name'
p15
S'Object'
p16
sS'children'
p17
g1
(g2
g3
NtRp18
((lp19
g1
(ccompiler.lang
Signal
p20
g3
NtRp21
(dp22
g9
g1
(g10
g3
NtRp23
(dp24
g13
S'emitted when model is reset'
p25
sbsg15
S'reset'
p26
sbag1
(g20
g3
NtRp27
(dp28
g9
g1
(g10
g3
NtRp29
(dp30
g13
S'emitted when row is inserted'
p31
sbsg15
S'rowsInserted'
p32
sbag1
(g20
g3
NtRp33
(dp34
g9
g1
(g10
g3
NtRp35
(dp36
g13
S'emitted when row is changed'
p37
sbsg15
S'rowsChanged'
p38
sbag1
(g20
g3
NtRp39
(dp40
g9
g1
(g10
g3
NtRp41
(dp42
g13
S'emitted when row is removed'
p43
sbsg15
S'rowsRemoved'
p44
sbag1
(ccompiler.lang
Property
p45
g3
NtRp46
(dp47
g9
g1
(g10
g3
NtRp48
(dp49
g13
S'rows count property'
p50
sbsS'lazy'
p51
I00
sS'const'
p52
I00
sS'properties'
p53
(lp54
(S'count'
Ntp55
asS'type'
p56
S'int'
p57
sbag1
(g45
g3
NtRp58
(dp59
g9
g1
(g10
g3
NtRp60
(dp61
g13
S'target model object'
p62
sbsg51
I00
sg52
I00
sg53
(lp63
(S'target'
Ntp64
asg56
S'Object'
p65
sbag1
(ccompiler.lang
Method
p66
g3
NtRp67
(dp68
S'code'
p69
S'{\n\t\tthis._indexes = []\n\t}'
p70
sg9
g1
(g10
g3
NtRp71
(dp72
g13
S'@private'
p73
sbsS'args'
p74
g1
(g2
g3
NtRp75
((lp76
((dN(dp77
Nttbsg15
g1
(g2
g3
NtRp78
((lp79
S'constructor'
p80
a((dN(dp81
NttbsS'event'
p82
I01
sbag1
(g66
g3
NtRp83
(dp84
g69
S'{ this._buildIndexMap() }'
p85
sg9
Nsg74
g1
(g2
g3
NtRp86
((lp87
((dN(dp88
Nttbsg15
g1
(g2
g3
NtRp89
((lp90
S'rebuild'
p91
a((dN(dp92
Nttbsg82
I01
sbag1
(g66
g3
NtRp93
(dp94
g69
S'{\n\t\tthis._filter = filter\n\t\tthis._buildIndexMap()\n\t}'
p95
sg9
g1
(g10
g3
NtRp96
(dp97
g13
S"this method set target model rows filter function, 'filter' function must return boolean value, 'true' - when row must be displayed, 'false' otherwise"
p98
sbsg74
g1
(g2
g3
NtRp99
((lp100
S'filter'
p101
a((dN(dp102
Nttbsg15
g1
(g2
g3
NtRp103
((lp104
S'setFilter'
p105
a((dN(dp106
Nttbsg82
I00
sbag1
(g66
g3
NtRp107
(dp108
g69
S'{\n\t\tthis._cmp = cmp\n\t\tthis._buildIndexMap()\n\t}'
p109
sg9
g1
(g10
g3
NtRp110
(dp111
g13
S"this method set a comparison function, target model rows are sorted in ascending order according to a comparison function 'cmp'"
p112
sbsg74
g1
(g2
g3
NtRp113
((lp114
S'cmp'
p115
a((dN(dp116
Nttbsg15
g1
(g2
g3
NtRp117
((lp118
S'setCompare'
p119
a((dN(dp120
Nttbsg82
I00
sbag1
(g66
g3
NtRp121
(dp122
g69
S'{\n\t\tthis.clear()\n\t\tvar targetRows = this.target._rows\n\t\tif (!targetRows) {\n\t\t\tlog("Bad target model")\n\t\t\treturn\n\t\t}\n\t\tif (this._filter) {\n\t\t\tfor (var i = 0; i < targetRows.length; ++i)\n\t\t\t\tif (this._filter(targetRows[i])) {\n\t\t\t\t\tvar last = this._indexes.length\n\t\t\t\t\tthis._indexes.push(i)\n\t\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = 0; i < targetRows.length; ++i) {\n\t\t\t\tthis._indexes.push(i)\n\t\t\t}\n\t\t}\n\t\tif (this._cmp) {\n\t\t\tvar self = this\n\t\t\tthis._indexes = this._indexes.sort(function(a, b) { return self._cmp(targetRows[a], targetRows[b]) })\n\t\t}\n\t\tthis.count = this._indexes.length\n\t\tthis.rowsInserted(0, this.count)\n\t}'
p123
sg9
g1
(g10
g3
NtRp124
(dp125
g13
S'@private'
p126
sbsg74
g1
(g2
g3
NtRp127
((lp128
((dN(dp129
Nttbsg15
g1
(g2
g3
NtRp130
((lp131
S'_buildIndexMap'
p132
a((dN(dp133
Nttbsg82
I00
sbag1
(g66
g3
NtRp134
(dp135
g69
S"{\n\t\tvar targetRows = this.target._rows\n\t\tif (!targetRows)\n\t\t\tthrow new Error('Bad target model')\n\t\tif (idx < 0 || idx >= this._indexes.length)\n\t\t\tthrow new Error('index ' + idx + ' out of bounds')\n\t\tvar row = targetRows[this._indexes[idx]]\n\t\tif (!(row instanceof Object))\n\t\t\tthrow new Error('row is non-object')\n\t\trow.index = idx\n\t\treturn row\n\t}"
p136
sg9
g1
(g10
g3
NtRp137
(dp138
g13
S"returns a model's row by index, throw exception if index is out of range or if requested row is non-object"
p139
sbsg74
g1
(g2
g3
NtRp140
((lp141
S'idx'
p142
a((dN(dp143
Nttbsg15
g1
(g2
g3
NtRp144
((lp145
S'get'
p146
a((dN(dp147
Nttbsg82
I00
sbag1
(g66
g3
NtRp148
(dp149
g69
S'{\n\t\tthis._indexes = []\n\t\tthis.count = 0\n\t\tthis.reset()\n\t}'
p150
sg9
g1
(g10
g3
NtRp151
(dp152
g13
S'remove all rows'
p153
sbsg74
g1
(g2
g3
NtRp154
((lp155
((dN(dp156
Nttbsg15
g1
(g2
g3
NtRp157
((lp158
S'clear'
p159
a((dN(dp160
Nttbsg82
I00
sbag1
(g66
g3
NtRp161
(dp162
g69
S'{\n\t\tthis.target.append(row)\n\t}'
p163
sg9
g1
(g10
g3
NtRp164
(dp165
g13
S'append row to the model'
p166
sbsg74
g1
(g2
g3
NtRp167
((lp168
S'row'
p169
a((dN(dp170
Nttbsg15
g1
(g2
g3
NtRp171
((lp172
S'append'
p173
a((dN(dp174
Nttbsg82
I00
sbag1
(g66
g3
NtRp175
(dp176
g69
S"{\n\t\tif (idx < 0 || idx > this._indexes.length)\n\t\t\tthrow new Error('index ' + idx + ' out of bounds')\n\n\t\tvar targetIdx = this._indexes[idx]\n\t\tthis.target.set(targetIdx, row)\n\t}"
p177
sg9
g1
(g10
g3
NtRp178
(dp179
g13
S'place row at requested index, throws exception when index is out of range'
p180
sbsg74
g1
(g2
g3
NtRp181
((lp182
S'idx'
p183
aS'row'
p184
a((dN(dp185
Nttbsg15
g1
(g2
g3
NtRp186
((lp187
S'insert'
p188
a((dN(dp189
Nttbsg82
I00
sbag1
(g66
g3
NtRp190
(dp191
g69
S"{\n\t\tif (idx < 0 || idx >= this._indexes.length)\n\t\t\tthrow new Error('index ' + idx + ' out of bounds')\n\t\tif (!(row instanceof Object))\n\t\t\tthrow new Error('row is non-object')\n\t\tvar targetIdx = this._indexes[idx]\n\t\tthis.target.set(targetIdx, row)\n\t}"
p192
sg9
g1
(g10
g3
NtRp193
(dp194
g13
S"replace row at 'idx' position by 'row' argument, throws exception if index is out of range or if 'row' isn't Object"
p195
sbsg74
g1
(g2
g3
NtRp196
((lp197
S'idx'
p198
aS'row'
p199
a((dN(dp200
Nttbsg15
g1
(g2
g3
NtRp201
((lp202
S'set'
p203
a((dN(dp204
Nttbsg82
I00
sbag1
(g66
g3
NtRp205
(dp206
g69
S"{\n\t\tif (idx < 0 || idx >= this._indexes.length)\n\t\t\tthrow new Error('index ' + idx + ' out of bounds')\n\t\tvar targetIdx = this._indexes[idx]\n\t\tthis.target.setProperty(targetIdx, name, value)\n\t}"
p207
sg9
g1
(g10
g3
NtRp208
(dp209
g13
S"replace a row's property, throws exception if index is out of range or if 'row' isn't Object"
p210
sbsg74
g1
(g2
g3
NtRp211
((lp212
S'idx'
p213
aS'name'
p214
aS'value'
p215
a((dN(dp216
Nttbsg15
g1
(g2
g3
NtRp217
((lp218
S'setProperty'
p219
a((dN(dp220
Nttbsg82
I00
sbag1
(g66
g3
NtRp221
(dp222
g69
S"{\n\t\tif (idx < 0 || idx >= this._indexes.length)\n\t\t\tthrow new Error('index ' + idx + ' out of bounds')\n\t\tthis.target.remove(this._indexes[idx], n)\n\t}"
p223
sg9
g1
(g10
g3
NtRp224
(dp225
g13
S"remove rows from model from 'idx' to 'idx' + 'n' position"
p226
sbsg74
g1
(g2
g3
NtRp227
((lp228
S'idx'
p229
aS'n'
a((dN(dp230
Nttbsg15
g1
(g2
g3
NtRp231
((lp232
S'remove'
p233
a((dN(dp234
Nttbsg82
I00
sbag1
(g66
g3
NtRp235
(dp236
g69
S'{\n\t\tthis.append(child)\n\t}'
p237
sg9
g1
(g10
g3
NtRp238
(dp239
g13
S"this method is alias for 'append' method"
p240
sbsg74
g1
(g2
g3
NtRp241
((lp242
S'child'
p243
a((dN(dp244
Nttbsg15
g1
(g2
g3
NtRp245
((lp246
S'addChild'
p247
a((dN(dp248
Nttbsg82
I00
sbag1
(g66
g3
NtRp249
(dp250
g69
S"{\n\t\tvar target = this.target\n\n\t\tthis.connectOn(target, 'reset', this._buildIndexMap.bind(this))\n\t\tthis.connectOn(target, 'rowsInserted', this._buildIndexMap.bind(this))\n\t\tthis.connectOn(target, 'rowsChanged', this._buildIndexMap.bind(this))\n\t\tthis.connectOn(target, 'rowsRemoved', this._buildIndexMap.bind(this))\n\n\t\tthis._buildIndexMap()\n\t}"
p251
sg9
g1
(g10
g3
NtRp252
(dp253
g13
S'@private'
p254
sbsg74
g1
(g2
g3
NtRp255
((lp256
((dN(dp257
Nttbsg15
g1
(g2
g3
NtRp258
((lp259
S'onCompleted'
p260
a((dN(dp261
Nttbsg82
I01
sba((dN(dp262
Nttbsba((dN(dp263
Nttb.