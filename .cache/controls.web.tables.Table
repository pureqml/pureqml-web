e631456f44295b95e51ac7fa9868893e60e73989
ccopy_reg
_reconstructor
p1
(ccompiler.pyparsing
ParseResults
p2
c__builtin__
object
p3
NtRp4
((lp5
g1
(ccompiler.lang
Component
p6
g3
NtRp7
(dp8
S'doc'
p9
NsS'name'
p10
S'TableElement'
p11
sS'children'
p12
g1
(g2
g3
NtRp13
((lp14
g1
(ccompiler.lang
Method
p15
g3
NtRp16
(dp17
S'code'
p18
S"{ return 'table' }"
p19
sg9
NsS'args'
p20
g1
(g2
g3
NtRp21
((lp22
((dN(dp23
Nttbsg10
g1
(g2
g3
NtRp24
((lp25
S'getTag'
p26
a((dN(dp27
NttbsS'event'
p28
I00
sbag1
(ccompiler.lang
Property
p29
g3
NtRp30
(dp31
g9
NsS'lazy'
p32
I00
sS'const'
p33
I00
sS'properties'
p34
(lp35
(S'model'
g1
(g6
g3
NtRp36
(dp37
g9
Nsg10
S'ListModel'
p38
sg12
g1
(g2
g3
NtRp39
((lp40
((dN(dp41
Nttbsbtp42
asS'type'
p43
S'Object'
p44
sbag1
(g29
g3
NtRp45
(dp46
g9
Nsg32
I00
sg33
I00
sg34
(lp47
(S'headerModel'
g1
(g6
g3
NtRp48
(dp49
g9
Nsg10
S'ListModel'
p50
sg12
g1
(g2
g3
NtRp51
((lp52
((dN(dp53
Nttbsbtp54
asg43
S'Object'
p55
sbag1
(g29
g3
NtRp56
(dp57
g9
Nsg32
I00
sg33
I00
sg34
(lp58
(S'textColor'
Ntp59
asg43
S'Color'
p60
sbag1
(g15
g3
NtRp61
(dp62
g18
S"{ this.style('color', _globals.core.Color.normalize(value)) }"
p63
sg9
Nsg20
g1
(g2
g3
NtRp64
((lp65
((dN(dp66
Nttbsg10
g1
(g2
g3
NtRp67
((lp68
S'onTextColorChanged'
p69
a((dN(dp70
Nttbsg28
I01
sbag1
(g6
g3
NtRp71
(dp72
g9
Nsg10
S'TableHeader'
p73
sg12
g1
(g2
g3
NtRp74
((lp75
g1
(ccompiler.lang
Assignment
p76
g3
NtRp77
(dp78
g9
NsS'target'
p79
S'model'
p80
sS'value'
p81
S'(${parent.headerModel})'
p82
sbag1
(g76
g3
NtRp83
(dp84
g9
Nsg79
S'delegate'
p85
sg81
g1
(g6
g3
NtRp86
(dp87
g9
Nsg10
S'TableHeaderCell'
p88
sg12
g1
(g2
g3
NtRp89
((lp90
g1
(g76
g3
NtRp91
(dp92
g9
Nsg79
S'text'
p93
sg81
S'(${model.text})'
p94
sba((dN(dp95
Nttbsbsba((dN(dp96
Nttbsbag1
(g6
g3
NtRp97
(dp98
g9
Nsg10
S'TableBody'
p99
sg12
g1
(g2
g3
NtRp100
((lp101
g1
(g76
g3
NtRp102
(dp103
g9
Nsg79
S'model'
p104
sg81
S'(${parent.model})'
p105
sbag1
(g76
g3
NtRp106
(dp107
g9
Nsg79
S'delegate'
p108
sg81
g1
(g6
g3
NtRp109
(dp110
g9
Nsg10
S'TableRow'
p111
sg12
g1
(g2
g3
NtRp112
((lp113
g1
(g76
g3
NtRp114
(dp115
g9
Nsg79
S'model'
p116
sg81
g1
(g6
g3
NtRp117
(dp118
g9
Nsg10
S'ListModel'
p119
sg12
g1
(g2
g3
NtRp120
((lp121
g1
(g76
g3
NtRp122
(dp123
g9
Nsg79
S'data'
p124
sg81
S'(${model.data})'
p125
sba((dN(dp126
Nttbsbsbag1
(g76
g3
NtRp127
(dp128
g9
Nsg79
S'delegate'
p129
sg81
g1
(g6
g3
NtRp130
(dp131
g9
Nsg10
S'TableCell'
p132
sg12
g1
(g2
g3
NtRp133
((lp134
g1
(g76
g3
NtRp135
(dp136
g9
Nsg79
S'text'
p137
sg81
S'(${model.value})'
p138
sba((dN(dp139
Nttbsbsba((dN(dp140
Nttbsbsba((dN(dp141
Nttbsbag1
(g15
g3
NtRp142
(dp143
g18
S"{\n\t\tlog('table data', data, columns)\n\t\tvar headerModel = this.headerModel\n\t\tcolumns.forEach(function(name) { headerModel.append({ text: name }) })\n\t\tvar rowData = []\n\t\tdata.forEach(function (srcRow) {\n\t\t\tvar row = []\n\t\t\tcolumns.forEach(function(name) {\n\t\t\t\tvar value = srcRow[name]\n\t\t\t\tif (value !== undefined)\n\t\t\t\t\trow.push({ value: value })\n\t\t\t\telse\n\t\t\t\t\trow.push('')\n\t\t\t})\n\t\t\trowData.push({ data: row})\n\t\t})\n\t\tlog('table data', rowData)\n\t\tthis.model.assign(rowData)\n\t}"
p144
sg9
Nsg20
g1
(g2
g3
NtRp145
((lp146
S'data'
p147
aS'columns'
p148
a((dN(dp149
Nttbsg10
g1
(g2
g3
NtRp150
((lp151
S'assign'
p152
a((dN(dp153
Nttbsg28
I01
sba((dN(dp154
Nttbsba((dN(dp155
Nttb.